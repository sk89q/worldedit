public net.minecraft.server.MinecraftServer nextTickTimeNanos

# For regen
public net.minecraft.server.MinecraftServer storageSource
public net.minecraft.server.level.ServerChunkCache mainThreadProcessor

public net.minecraft.world.level.chunk.ChunkBiomeContainer biomes
public-f net.minecraft.world.level.storage.PrimaryLevelData worldOptions

public net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket <init>(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/entity/BlockEntityType;Lnet/minecraft/nbt/CompoundTag;)V

# Ability to mark sections changed
public net.minecraft.server.level.ServerChunkCache getVisibleChunkIfPresent(J)Lnet/minecraft/server/level/ChunkHolder;
public net.minecraft.server.level.ChunkHolder changedBlocksPerSection
public net.minecraft.server.level.ChunkHolder hasChangedSections

# Ability to make a copy of the container
public net.minecraft.world.level.chunk.PalettedContainer <init>(Lnet/minecraft/core/IdMap;Lnet/minecraft/world/level/chunk/PalettedContainer$Strategy;Lnet/minecraft/world/level/chunk/PalettedContainer$Data;)V
public net.minecraft.world.level.chunk.PalettedContainer registry
public net.minecraft.world.level.chunk.PalettedContainer strategy
public net.minecraft.world.level.chunk.PalettedContainer$Data
public net.minecraft.world.level.chunk.PalettedContainer data

# Ability to recreate the data using Mojang's logic
public net.minecraft.world.level.chunk.PalettedContainer createOrReuseData(Lnet/minecraft/world/level/chunk/PalettedContainer$Data;I)Lnet/minecraft/world/level/chunk/PalettedContainer$Data;
